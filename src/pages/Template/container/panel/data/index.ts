import { HttpStatusCode } from "axios";
import { AssertionCondition, AssertionType, MappingKey, ParameterPlacementKey } from "../../../../../types";

export const DATA = {
    NODE_DEFAULT_DATA: {
        name: "",
        metadata: {
            method: undefined,
            url: "",
            params: [],
            headers: [],
            authentication: "",
            body: ""
        }
    },
    POST_RESPONSE_ASSERTION_DEFAULT_DATA: {
        type: "" as AssertionType,
        key: "",
        condition: "" as AssertionCondition,
        value: "",
    },
    PRE_REQUEST_ASSERTION_DEFAULT_DATA: {
        currentKey: "",
        paramPosition: "" as ParameterPlacementKey,
        prevActionKey: "",
        prevParamPosition: "" as ParameterPlacementKey,
        prevNodeName: undefined,
        isDataMapping: false,
        mapping: {
            key: "" as MappingKey,
            value: "",
        }
    },
    PRE_REQUEST_ASSERTION_DEFAULT_ERROR: {
        currentKey: "",
        paramPosition: "",
        prevActionKey: "",
        prevParamPosition: "",
        prevNodeName: "",
        mapping: {
            key: "",
            value: "",
        }
    },
    PRE_REQUEST_ASSERTION_ERROR: {
        INVALID_URL: "Please enter a valid url containing the route parameter as key.",
        URL_NOT_FOUND: "URL not inserted. Please add a url before adding mapper assertions."
    },
    HTTP_STATUSES: [
        { code: HttpStatusCode.Continue, message: `` },
        { code: HttpStatusCode.SwitchingProtocols, message: `` },
        { code: HttpStatusCode.Processing, message: `` },
        { code: HttpStatusCode.EarlyHints, message: `` },
        { code: HttpStatusCode.Ok, message: `` },
        { code: HttpStatusCode.Created, message: `` },
        { code: HttpStatusCode.Accepted, message: `` },
        { code: HttpStatusCode.NonAuthoritativeInformation, message: `` },
        { code: HttpStatusCode.NoContent, message: `` },
        { code: HttpStatusCode.ResetContent, message: `` },
        { code: HttpStatusCode.PartialContent, message: `` },
        { code: HttpStatusCode.MultiStatus, message: `` },
        { code: HttpStatusCode.AlreadyReported, message: `` },
        { code: HttpStatusCode.ImUsed, message: `` },
        { code: HttpStatusCode.MultipleChoices, message: `` },
        { code: HttpStatusCode.MovedPermanently, message: `` },
        { code: HttpStatusCode.Found, message: `` },
        { code: HttpStatusCode.SeeOther, message: `` },
        { code: HttpStatusCode.NotModified, message: `` },
        { code: HttpStatusCode.UseProxy, message: `` },
        { code: HttpStatusCode.Unused, message: `` },
        { code: HttpStatusCode.TemporaryRedirect, message: `` },
        { code: HttpStatusCode.PermanentRedirect, message: `` },
        { code: HttpStatusCode.BadRequest, message: `` },
        { code: HttpStatusCode.Unauthorized, message: `` },
        { code: HttpStatusCode.PaymentRequired, message: `` },
        { code: HttpStatusCode.Forbidden, message: `` },
        { code: HttpStatusCode.NotFound, message: `` },
        { code: HttpStatusCode.MethodNotAllowed, message: `` },
        { code: HttpStatusCode.NotAcceptable, message: `` },
        { code: HttpStatusCode.ProxyAuthenticationRequired, message: `` },
        { code: HttpStatusCode.RequestTimeout, message: `` },
        { code: HttpStatusCode.Conflict, message: `` },
        { code: HttpStatusCode.Gone, message: `` },
        { code: HttpStatusCode.LengthRequired, message: `` },
        { code: HttpStatusCode.PreconditionFailed, message: `` },
        { code: HttpStatusCode.PayloadTooLarge, message: `` },
        { code: HttpStatusCode.UriTooLong, message: `` },
        { code: HttpStatusCode.UnsupportedMediaType, message: `` },
        { code: HttpStatusCode.RangeNotSatisfiable, message: `` },
        { code: HttpStatusCode.ExpectationFailed, message: `` },
        { code: HttpStatusCode.ImATeapot, message: `` },
        { code: HttpStatusCode.MisdirectedRequest, message: `` },
        { code: HttpStatusCode.UnprocessableEntity, message: `` },
        { code: HttpStatusCode.Locked, message: `` },
        { code: HttpStatusCode.FailedDependency, message: `` },
        { code: HttpStatusCode.TooEarly, message: `` },
        { code: HttpStatusCode.UpgradeRequired, message: `` },
        { code: HttpStatusCode.PreconditionRequired, message: `` },
        { code: HttpStatusCode.TooManyRequests, message: `` },
        { code: HttpStatusCode.RequestHeaderFieldsTooLarge, message: `` },
        { code: HttpStatusCode.UnavailableForLegalReasons, message: `` },
        { code: HttpStatusCode.InternalServerError, message: `` },
        { code: HttpStatusCode.NotImplemented, message: `` },
        { code: HttpStatusCode.BadGateway, message: `` },
        { code: HttpStatusCode.ServiceUnavailable, message: `` },
        { code: HttpStatusCode.GatewayTimeout, message: `` },
        { code: HttpStatusCode.HttpVersionNotSupported, message: `` },
        { code: HttpStatusCode.VariantAlsoNegotiates, message: `` },
        { code: HttpStatusCode.InsufficientStorage, message: `` },
        { code: HttpStatusCode.LoopDetected, message: `` },
        { code: HttpStatusCode.NotExtended, message: `` },
        { code: HttpStatusCode.NetworkAuthenticationRequired, message: `` },
    ],
}